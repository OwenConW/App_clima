{"version":3,"sources":["estilos/Card.module.css","estilos/SearchBar.module.css","estilos/Nav.module.css","components/SearchBar.jsx","components/Nav.jsx","components/Card.jsx","components/Cards.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchBar","onSearch","useState","ciudad","setCiudad","className","EstiloSearchBar","divSearchBar","onSubmit","e","preventDefault","form","type","placeholder","onChange","evento","target","value","buscarform","Nav","SearchBarStyles","titulo","Card","min","max","name","img","onClose","id","estiloCard","divCard","onClick","buttonx","h1Card","src","alt","imgCard","divCardH4","h4Card","Cards","cities","map","c","App","setCities","forEach","city","alert","fetch","then","r","json","recurso","undefined","main","Math","floor","temp_min","ceil","temp_max","weather","icon","wind","speed","temp","clouds","all","latitud","coord","lat","longitud","lon","oldCities","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.09becab9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"divCard\":\"Card_divCard__1PGfO\",\"divCardH4\":\"Card_divCardH4__1F55N\",\"h1Card\":\"Card_h1Card__3ZErK\",\"h4Card\":\"Card_h4Card__15Up6\",\"imgCard\":\"Card_imgCard__1TCKA\",\"buttonx\":\"Card_buttonx__18kFe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"divSearchBar\":\"SearchBar_divSearchBar__25Aoi\",\"form\":\"SearchBar_form__2_Q1B\",\"buscarform\":\"SearchBar_buscarform__x_pcC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"barradenav\":\"Nav_barradenav__12WsO\",\"titulo\":\"Nav_titulo__3aqKg\"};","import React, {useState} from 'react';\nimport EstiloSearchBar from \"../estilos/SearchBar.module.css\"\n\n\nexport default function SearchBar({onSearch}) {\n  // acá va tu código\n  let [ciudad, setCiudad] = useState([]);\n  function Escucha(evento){\n    setCiudad(ciudad = evento.target.value);\n  }\n  return (\n    <form className={EstiloSearchBar.divSearchBar} onSubmit={(e) => {\n      e.preventDefault();\n      onSearch(ciudad)\n  \n    }}>\n      <input\n        className={EstiloSearchBar.form}\n        type=\"text\"\n        placeholder=\"Ingrese una Ciudad para buscar...\"\n        onChange={Escucha}\n      />\n      <input className={EstiloSearchBar.buscarform}type=\"submit\" value=\"Buscar Ciudad\"/>\n    </form>\n    )\n};","import React from 'react';\nimport SearchBar from './SearchBar.jsx';\nimport SearchBarStyles from \"../estilos/Nav.module.css\";\n\nfunction Nav({onSearch}) {\n  return (\n    <div className={SearchBarStyles.titulo}>\n      <style>\n      @import url('https://fonts.googleapis.com/css2?family=Jost&family=Roboto+Mono:ital@1&display=swap');\n      </style>\n      <h1 className=\"h1nav\">Wheater app</h1>\n      <SearchBar onSearch={onSearch}></SearchBar>\n    </div>\n  );\n};\n\nexport default Nav;\n","import React from 'react';\nimport estiloCard from \"../estilos/Card.module.css\"\n\nexport default function Card({min, max, name, img, onClose, id}) {\n  // acá va tu código\n  return (\n  <div className={estiloCard.divCard}> \n    <button onClick={onClose} className={estiloCard.buttonx}>x</button>\n    <div> \n    <h1 className={estiloCard.h1Card}>{name}</h1><br></br>\n    <img src={`http://openweathermap.org/img/wn/${img}@2x.png`} alt=\"nashe\" className={estiloCard.imgCard}/>\n    </div>\n    <div className={estiloCard.divCardH4}>\n      <h4 className={estiloCard.h4Card}>Min: {min}°</h4>\n      <h4 className={estiloCard.h4Card}> Max: {max}°</h4>\n    </div>\n\n  </div>)\n};\n// <image src={`http://openweathermap.org/img/wn/${props.img}@2x.png`}/>","import React from 'react';\nimport Card from \"./Card.jsx\"\n\nexport default function Cards({cities, onClose}) {\n  if(cities){\n    return (\n      <div className='cards'>\n        {cities.map(c => <Card\n            max={c.max}\n            min={c.min}\n            name={c.name}\n            img={c.img}\n            onClose={() => onClose(c.id)}\n            id={c.id}\n          /> )}\n      </div>\n    );\n  } else {\n    return(\n      <div>Sin ciudades</div>\n    )\n  }\n};","import React, {useState} from 'react';\nimport './App.css';\nimport Nav from \"./components/Nav.jsx\"\n\nimport Cards from './components/Cards.jsx';\nimport estilosGlobales from \"./global/global.css\"\n\n\nfunction App() {\n  const [cities, setCities] = useState([])\n  function onSearch(ciudad) {\n    cities.forEach(city => {\n      if(city.name === ciudad ){\n         return alert(`${ciudad} ya se encuentra en pantalla`)\n        }})\n  fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=4ae2636d8dfbdc3044bede63951a019b&units=metric`)\n      .then(r => r.json())\n      .then((recurso) => {\n        if(recurso.main !== undefined){\n          const ciudad = {\n            min: Math.floor(recurso.main.temp_min),\n            max: Math.ceil(recurso.main.temp_max),\n            img: recurso.weather[0].icon,\n            id: recurso.id,\n            wind: recurso.wind.speed,\n            temp: recurso.main.temp,\n            name: recurso.name,\n            weather: recurso.weather[0].main,\n            clouds: recurso.clouds.all,\n            latitud: recurso.coord.lat,\n            longitud: recurso.coord.lon\n          };\n          setCities(cities => [...cities, ciudad]);\n        } else {\n          alert(`No se encontro a ${ciudad}`);\n        }\n      });\n    }\n    function onClose(id) {\n      setCities(oldCities => oldCities.filter(c => c.id !== id));\n    }\n  return (\n    <div className=\"App\">\n      <Nav onSearch={onSearch}></Nav>\n      <Cards cities={cities} onClose={onClose}></Cards>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}